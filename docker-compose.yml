version: "3.8"

services:
  mysqldb:
    image: mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    ports:
      - 3306:3306
    volumes:
      - db:/var/lib/mysql
      - ./seeder:/docker-entrypoint-initdb.d

  rabbitmq:
    image: rabbitmq:management
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  app-products:
    # Will run after mysqldb healthcheck = service_healthy
    container_name: app-products
    depends_on:
      mysqldb:
        condition: service_healthy
    build: ./products-backend
    restart: unless-stopped
    env_file: ./products-backend/.env
    ports:
      - 5001:5001
    environment:
      - DB_HOST=mysqldb
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=be-mini-project-5-products
      - DB_PORT=3306
      - RABBITMQ_HOST=amqp://rabbitmq:5672
    stdin_open: true
    tty: true

  app-orders:
    # Will run after mysqldb healthcheck = service_healthy
    container_name: app-orders
    depends_on:
      mysqldb:
        condition: service_healthy
    build: ./orders-backend
    restart: unless-stopped
    env_file: ./orders-backend/.env
    ports:
      - 5000:5000
    environment:
      - DB_HOST=mysqldb
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=be-mini-project-5-orders
      - DB_PORT=3306
      - RABBITMQ_HOST=amqp://rabbitmq:5672
    stdin_open: true
    tty: true

  app-notifications:
    # Will run after mysqldb healthcheck = service_healthy
    container_name: app-notifications
    depends_on:
      mysqldb:
        condition: service_healthy
    build: ./notification-backend
    restart: unless-stopped
    env_file: ./notification-backend/.env
    ports:
      - 5002:5002
    environment:
      - DB_HOST=mysqldb
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=be-mini-project-5-notification
      - DB_PORT=3306
      - RABBITMQ_HOST=amqp://rabbitmq:5672
    stdin_open: true
    tty: true

  kong-database:
    image: postgres:9.6
    container_name: kong-database
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - "db-data-kong-postgres:/var/lib/postgresql/data"

  kong-migrations:
    image: kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: kong migrations bootstrap
    restart: on-failure
    depends_on:
      - kong-database

  kong:
    image: kong
    container_name: kong
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    restart: on-failure
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    links:
      - kong-database:kong-database
    depends_on:
      - kong-migrations

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
    container_name: konga
    environment:
      - NODE_ENV=production

volumes:
  db:
  db-data-kong-postgres: